sim_n_persons_x_times(dexp(1:30, .05), n=2, a=sam, times=100)
sim_n_persons_x_times <- function(prob, n, a, times, progress=T){   #
  if (progress)#
    .progress <- "text"#
  else #
    .progress <- "none"#
  ldply(1L:times, function(x, prob, n, a){#
          sim_n_persons(prob, n, a=a)#
        }, prob=prob, n=n, a=a, .progress=.progress)#
}
no <- c(1,30)
sam <- quote(sample(no, 1))
sim_n_persons_x_times(dexp(1:30, .05), n=2, a=sam, times=100)
sim_one_person <- function(prob, a=10){#
  a <- eval(a)      # in case it is a function#
  if (a > length(prob))#
    stop("the number of attributes 'a' must not exceed the number of categories, i.e. length of 'prob'")#
  d.all <- NULL#
  for (i in 1:a){#
    prob <- prob / sum(prob)#
    d <- rmultinom(1, size = 1, prob=prob) #
    d.index <- which(d == 1) #
    prob[d.index] <- 0  #
    d.all <- cbind(d.all, d) #
  }#
  apply(d.all, 1, sum)    #
}
sim_one_person(dexp(1:30, rate=.05), a=10)
sim_n_persons <- function(prob, n, a=10){ #
  a <- substitute(a)#
  sim <- replicate(n, sim_one_person(prob, a=a) )#
  apply(sim, 1, sum) #
}#
sim_n_persons(dexp(1:30, .05), n=5, a=10)
sam <- quote(sample(c(1,30), 1))
sim_n_persons(dexp(1:30, .05), n=3, a=sam)
sim_n_persons <- function(prob, n, a=10){ #
  a <- substitute(a)#
  browser()#
  sim <- replicate(n, sim_one_person(prob, a=a) )#
  apply(sim, 1, sum) #
}
sam <- quote(sample(c(1,30), 1))
sim_n_persons(dexp(1:30, .05), n=3, a=sam)
a
eval(sam)
Q
sim_one_person <- function(prob, a=10){#
  browser()#
  a <- eval(a)      # in case it is a function#
  if (a > length(prob))#
    stop("the number of attributes 'a' must not exceed the number of categories, i.e. length of 'prob'")#
  d.all <- NULL#
  for (i in 1:a){#
    prob <- prob / sum(prob)#
    d <- rmultinom(1, size = 1, prob=prob) #
    d.index <- which(d == 1) #
    prob[d.index] <- 0  #
    d.all <- cbind(d.all, d) #
  }#
  apply(d.all, 1, sum)    #
} #
#sim_one_person(dexp(1:30, rate=.05), a=10)#
#
# a can be a number of a function returning a number#
# sim_n_persons <- function(prob, n, a=10){ #
#   a.exp <- substitute(a)#
#   sim <- replicate(n, sim_one_person(prob, a=eval(a.exp)) )#
#   apply(sim, 1, sum) #
# } #
sim_n_persons <- function(prob, n, a=10){ #
  a <- substitute(a)#
  sim <- replicate(n, sim_one_person(prob, a=a) )#
  apply(sim, 1, sum) #
}
sam <- quote(sample(c(1,30), 1))
sim_n_persons(dexp(1:30, .05), n=3, a=sam)
a
  a <- eval(a)      # in case it is a function
prob
length(prob)
a
eval(a)
a
Q
sam <- quote(sample(c(1,30), 1))
sim_n_persons(dexp(1:30, .05), n=3, a=sam)
a
eval(a)
eval(eval(expr=Q))
Q
sim_n_persons <- function(prob, n, a=10){ #
  a <- substitute(a)#
  sim <- replicate(n, sim_one_person(prob, a=eval(a))#
  apply(sim, 1, sum) #
}#
sim_n_persons(dexp(1:30, .05), n=5, a=10)
sim_one_person <- function(prob, a=10){#
  #browser()#
  a <- eval(a)      # in case it is a function#
  if (a > length(prob))#
    stop("the number of attributes 'a' must not exceed the number of categories, i.e. length of 'prob'")#
  d.all <- NULL#
  for (i in 1:a){#
    prob <- prob / sum(prob)#
    d <- rmultinom(1, size = 1, prob=prob) #
    d.index <- which(d == 1) #
    prob[d.index] <- 0  #
    d.all <- cbind(d.all, d) #
  }#
  apply(d.all, 1, sum)    #
} #
#sim_one_person(dexp(1:30, rate=.05), a=10)#
#
# a can be a number of a function returning a number#
# sim_n_persons <- function(prob, n, a=10){ #
#   a.exp <- substitute(a)#
#   sim <- replicate(n, sim_one_person(prob, a=eval(a.exp)) )#
#   apply(sim, 1, sum) #
# } #
sim_n_persons <- function(prob, n, a=10){ #
  a <- substitute(a)#
  sim <- replicate(n, sim_one_person(prob, a=eval(a))#
  apply(sim, 1, sum) #
}#
sim_n_persons(dexp(1:30, .05), n=5, a=10)
sim_n_persons(dexp(1:30, .05), n=1, a=10)
sam <- quote(sample(c(1,30), 1))
sim_n_persons(dexp(1:30, .05), n=1, a=10)
sim_n_persons(dexp(1:30, .05), n=5, a=10)
sam <- quote(sample(c(1,30), 1))
sim_n_persons(dexp(1:30, .05), n=3, a=sam)
sim_n_persons <- function(prob, n, a=10){ #
  a <- substitute(a)#
  sim <- replicate(n, sim_one_person(prob, a=eval(a))#
  apply(sim, 1, sum) #
}
sim_one_person <- function(prob, a=10){#
  #browser()#
  a <- eval(eval(a))      # in case it is a function#
  if (a > length(prob))#
    stop("the number of attributes 'a' must not exceed the number of categories, i.e. length of 'prob'")#
  d.all <- NULL#
  for (i in 1:a){#
    prob <- prob / sum(prob)#
    d <- rmultinom(1, size = 1, prob=prob) #
    d.index <- which(d == 1) #
    prob[d.index] <- 0  #
    d.all <- cbind(d.all, d) #
  }#
  apply(d.all, 1, sum)    #
}
sim_n_persons(dexp(1:30, .05), n=5, a=10)
sam <- quote(sample(c(1,30), 1))
sim_n_persons(dexp(1:30, .05), n=3, a=sam)
sam <- sample(c(1,30), 1)
sim_n_persons(dexp(1:30, .05), n=3, a=sam)
sam <- sample(c(1,30), 1)
sim_n_persons(dexp(1:30, .05), n=3, a=sam)
sim_one_person <- function(prob, a=10){#
  #browser()#
  a <- eval(a)      # in case it is a function#
  if (a > length(prob))#
    stop("the number of attributes 'a' must not exceed the number of categories, i.e. length of 'prob'")#
  d.all <- NULL#
  for (i in 1:a){#
    prob <- prob / sum(prob)#
    d <- rmultinom(1, size = 1, prob=prob) #
    d.index <- which(d == 1) #
    prob[d.index] <- 0  #
    d.all <- cbind(d.all, d) #
  }#
  apply(d.all, 1, sum)    #
} #
#sim_one_person(dexp(1:30, rate=.05), a=10)#
#
# a can be a number of a function returning a number#
# sim_n_persons <- function(prob, n, a=10){ #
#   a.exp <- substitute(a)#
#   sim <- replicate(n, sim_one_person(prob, a=eval(a.exp)) )#
#   apply(sim, 1, sum) #
# } #
sim_n_persons <- function(prob, n, a=10){ #
  a <- substitute(a)#
  sim <- replicate(n, sim_one_person(prob, a=a)#
  apply(sim, 1, sum) #
}#
sim_n_persons(dexp(1:30, .05), n=5, a=10)
sim_n_persons <- function(prob, n, a=10){ #
  a <- substitute(a)#
  sim <- replicate(n, sim_one_person(prob, a=a))#
  apply(sim, 1, sum) #
}#
sim_n_persons(dexp(1:30, .05), n=5, a=10)
sam <- sample(c(1,30), 1)
sim_n_persons(dexp(1:30, .05), n=3, a=sam)
sim_n_persons <- function(prob, n, a=10){ #
  a <- quote(a)#
  sim <- replicate(n, sim_one_person(prob, a=a))#
  apply(sim, 1, sum) #
}#
sim_n_persons(dexp(1:30, .05), n=5, a=10)
sam <- sample(c(1,30), 1)
sim_n_persons(dexp(1:30, .05), n=3, a=sam)
sim_n_persons <- function(prob, n, a=10){ #
  a <- substitute(a)#
  browser()#
  sim <- replicate(n, sim_one_person(prob, a=a))#
  apply(sim, 1, sum) #
}#
sim_n_persons(dexp(1:30, .05), n=5, a=10)
a
sam <- sample(c(1,30), 1)
sim_n_persons(dexp(1:30, .05), n=3, a=sam)
a
sim_n_persons(dexp(1:30, .05), n=3, a=sam)
sam
sim_n_persons(dexp(1:30, .05), n=3, a=sample(c(1,30), 1))
sim_n_persons <- function(prob, n, a=10){ #
  a <- substitute(a)#
  sim <- replicate(n, sim_one_person(prob, a=a))#
  apply(sim, 1, sum) #
}
sim_n_persons(dexp(1:30, .05), n=3, a=sample(c(1,30), 1))
no <- c(1,30)
sim_n_persons(dexp(1:30, .05), n=3, a=sample(no, 1))
sim_one_person <- function(prob, a=10){#
  a <- eval(a)      # in case it is a function#
  if (a > length(prob))#
    stop("the number of attributes 'a' must not exceed the number of categories, i.e. length of 'prob'")#
  d.all <- NULL#
  for (i in 1:a){#
    prob <- prob / sum(prob)#
    d <- rmultinom(1, size = 1, prob=prob) #
    d.index <- which(d == 1) #
    prob[d.index] <- 0  #
    d.all <- cbind(d.all, d) #
  }#
  apply(d.all, 1, sum)    #
}
sim_one_person(dexp(1:30, rate=.05), a=10)
draw_n_person_sample <- function(prob, n, a=10){#
  res <- sim_n_persons(prob, n, a)#
  df <- data.frame(no=seq_along(res), cat=res)#
  g <- ggplot(df, aes(x=no, y=cat)) + geom_line() + geom_point() +#
              scale_y_continuous(limits = c(0, max(res)))  #
  print(g)#
}
sam <- quote(sample(c(1,30), 1))
draw_n_person_sample(dexp(1:30, rate=.05), 100, a=sam)
draw_n_person_sample(dexp(1:30, rate=.05), 100, a=sample(c(1,30), 1))
sim_n_persons(dexp(1:30, .05), n=3, a=sample(no, 1))
draw_n_person_sample <- function(prob, n, a=10){#
  a <- substitute(a)#
  res <- sim_n_persons(prob, n, a)#
  df <- data.frame(no=seq_along(res), cat=res)#
  g <- ggplot(df, aes(x=no, y=cat)) + geom_line() + geom_point() +#
              scale_y_continuous(limits = c(0, max(res)))  #
  print(g)#
}
draw_n_person_sample(dexp(1:30, rate=.05), 100, a=sample(c(1,30), 1))
sim_one_person <- function(prob, a=10){#
  a <- eval(a)      # in case it is a function#
  if (a > length(prob))#
    stop("the number of attributes 'a' must not exceed the number of categories, i.e. length of 'prob'")#
  d.all <- NULL#
  for (i in 1:a){#
    prob <- prob / sum(prob)#
    d <- rmultinom(1, size = 1, prob=prob) #
    d.index <- which(d == 1) #
    prob[d.index] <- 0  #
    d.all <- cbind(d.all, d) #
  }#
  apply(d.all, 1, sum)    #
} #
#sim_one_person(dexp(1:30, rate=.05), a=10)#
#
# a can be a number of a function returning a number#
sim_n_persons <- function(prob, n, a=10){ #
  a <- substitute(a)#
  sim <- replicate(n, sim_one_person(prob, a=a))#
  apply(sim, 1, sum) #
}
no <- c(1,30)
sim_n_persons(dexp(1:30, .05), n=3, a=sample(no, 1))
draw_n_person_sample <- function(prob, n, a=10){#
  browser()#
  res <- sim_n_persons(prob, n, a)#
  df <- data.frame(no=seq_along(res), cat=res)#
  g <- ggplot(df, aes(x=no, y=cat)) + geom_line() + geom_point() +#
              scale_y_continuous(limits = c(0, max(res)))  #
  print(g)#
}
draw_n_person_sample(dexp(1:30, rate=.05), 100, a=sample(c(1,30), 1))
prob
n
draw_n_person_sample <- function(prob, .n, a=10){#
  browser()#
  res <- sim_n_persons(prob, .n, a)#
  df <- data.frame(no=seq_along(res), cat=res)#
  g <- ggplot(df, aes(x=no, y=cat)) + geom_line() + geom_point() +#
              scale_y_continuous(limits = c(0, max(res)))  #
  print(g)#
}
draw_n_person_sample(dexp(1:30, rate=.05), 100, a=sample(c(1,30), 1))
.n
a
draw_n_person_sample(dexp(1:30, rate=.05), 100, a=sample(c(1,30), 1))
sim_n_persons(prob, .n, a)
prob
.n
a
Q
sim_n_persons <- function(prob, n, a=10){ #
  browser()#
  a <- substitute(a)#
  sim <- replicate(n, sim_one_person(prob, a=a))#
  apply(sim, 1, sum) #
}#
sim_n_persons(dexp(1:30, .05), n=5, a=10) #
no <- c(1,30)#
sim_n_persons(dexp(1:30, .05), n=3, a=sample(no, 1)) #
#
#
draw_n_person_sample <- function(prob, .n, a=10){#
  res <- sim_n_persons(prob, .n, a)#
  df <- data.frame(no=seq_along(res), cat=res)#
  g <- ggplot(df, aes(x=no, y=cat)) + geom_line() + geom_point() +#
              scale_y_continuous(limits = c(0, max(res)))  #
  print(g)#
}
draw_n_person_sample(dexp(1:30, rate=.05), 100, a=sample(c(1,30), 1))
prob
a
  a <- substitute(a)
a
  sim <- replicate(n, sim_one_person(prob, a=a))
Q
sim_one_person <- function(prob, a=10){#
  browser()#
  a <- eval(a)      # in case it is a function#
  if (a > length(prob))#
    stop("the number of attributes 'a' must not exceed the number of categories, i.e. length of 'prob'")#
  d.all <- NULL#
  for (i in 1:a){#
    prob <- prob / sum(prob)#
    d <- rmultinom(1, size = 1, prob=prob) #
    d.index <- which(d == 1) #
    prob[d.index] <- 0  #
    d.all <- cbind(d.all, d) #
  }#
  apply(d.all, 1, sum)    #
} #
#sim_one_person(dexp(1:30, rate=.05), a=10)#
#
# a can be a number of a function returning a number#
sim_n_persons <- function(prob, n, a=10){ #
  a <- substitute(a)#
  sim <- replicate(n, sim_one_person(prob, a=a))#
  apply(sim, 1, sum) #
}
draw_n_person_sample <- function(prob, .n, a=10){#
  res <- sim_n_persons(prob, .n, a)#
  df <- data.frame(no=seq_along(res), cat=res)#
  g <- ggplot(df, aes(x=no, y=cat)) + geom_line() + geom_point() +#
              scale_y_continuous(limits = c(0, max(res)))  #
  print(g)#
}
draw_n_person_sample(dexp(1:30, rate=.05), 100, a=sample(c(1,30), 1))
prob
a
 eval(a)
  a <- eval(a)      # in case it is a function
a
eval(a)
sim_one_person <- function(prob, a=10){#
  a <- eval(a)      # in case it is a function#
  if (a > length(prob))#
    stop("the number of attributes 'a' must not exceed the number of categories, i.e. length of 'prob'")#
  d.all <- NULL#
  for (i in 1:a){#
    prob <- prob / sum(prob)#
    d <- rmultinom(1, size = 1, prob=prob) #
    d.index <- which(d == 1) #
    prob[d.index] <- 0  #
    d.all <- cbind(d.all, d) #
  }#
  apply(d.all, 1, sum)    #
}
Q
sim_one_person <- function(prob, a=10){#
  a <- eval(a)      # in case it is a function#
  if (a > length(prob))#
    stop("the number of attributes 'a' must not exceed the number of categories, i.e. length of 'prob'")#
  d.all <- NULL#
  for (i in 1:a){#
    prob <- prob / sum(prob)#
    d <- rmultinom(1, size = 1, prob=prob) #
    d.index <- which(d == 1) #
    prob[d.index] <- 0  #
    d.all <- cbind(d.all, d) #
  }#
  apply(d.all, 1, sum)    #
} #
#sim_one_person(dexp(1:30, rate=.05), a=10)#
#
# a can be a number of a function (if wrapped in quote) #
# returning a number#
sim_n_persons <- function(prob, n, a=10){ #
  sim <- replicate(n, sim_one_person(prob, a=a) )#
  apply(sim, 1, sum) #
}#
sim_n_persons(dexp(1:30, .05), n=5, a=10)#
sam <- quote(sample(c(1,30), 1))#
sim_n_persons(dexp(1:30, .05), n=3, a=sam)
sim_n_persons(dexp(1:30, .05), n=3, a=sam)
sam <- quote(sample(c(1,30), 1))
draw_n_person_sample(dexp(1:30, rate=.05), 100, a=sam)
no <- c(1,30)
sam <- quote(sample(no, 1))
sim_n_persons_x_times(dexp(1:30, .05), n=2, a=sam, times=100)
expected_frequencies <- function(r){  #
  browser()#
  co <- t(apply(r, 1, quantile, probs=c(.05, .25, .5, .75, .95)))#
  df <- cbind(cat=1L:nrow(co), as.data.frame(co)) #
  df.melted <- melt(df, id.vars="cat")#
  df.melted$variable <- as.factor(df.melted$variable)   #
  g <- ggplot(subset(df.melted, variable!="50%"), aes(x=cat, y=value, group=variable, shape=variable)) +  #
              geom_line() + geom_point() +#
              geom_line(data=subset(df.melted, variable=="50%"), col="blue") +#
              geom_point(data=subset(df.melted, variable=="50%"), col="blue")  #
  g#
}
sam <- quote(sample(5:7, 1))
r <- sim_n_persons_x_times(dexp(1:30, rate=.05), n=50, a=sam, 100)
expected_frequencies(r)
  co <- t(apply(r, 1, quantile, probs=c(.05, .25, .5, .75, .95)))
co
  co <- t(apply(r, 2, quantile, probs=c(.05, .25, .5, .75, .95)))
co
  df <- cbind(cat=1L:nrow(co), as.data.frame(co))
  df.melted <- melt(df, id.vars="cat")
  df.melted$variable <- as.factor(df.melted$variable)
  g <- ggplot(subset(df.melted, variable!="50%"), aes(x=cat, y=value, group=variable, shape=variable)) +
              geom_line() + geom_point() +
              geom_line(data=subset(df.melted, variable=="50%"), col="blue") +
              geom_point(data=subset(df.melted, variable=="50%"), col="blue")
  g
Q
expected_frequencies <- function(r){  #
  co <- t(apply(r, 2, quantile, probs=c(.05, .25, .5, .75, .95)))#
  df <- cbind(cat=1L:nrow(co), as.data.frame(co)) #
  df.melted <- melt(df, id.vars="cat")#
  df.melted$variable <- as.factor(df.melted$variable)   #
  g <- ggplot(subset(df.melted, variable!="50%"), aes(x=cat, y=value, group=variable, shape=variable)) +  #
              geom_line() + geom_point() +#
              geom_line(data=subset(df.melted, variable=="50%"), col="blue") +#
              geom_point(data=subset(df.melted, variable=="50%"), col="blue")  #
  g#
}                     #
sam <- quote(sample(5:7, 1))
r <- sim_n_persons_x_times(dexp(1:30, rate=.05), n=50, a=sam, 100)
expected_frequencies(r)
r <- sim_n_persons_x_times(dexp(1:30, rate=.05), n=50, a=sam, 100)
expected_frequencies(r)
r <- sim_n_persons_x_times(dexp(1:30, rate=.05), n=50, a=sam, 100)
expected_frequencies(r)
prob_categories <- function(r, m, min.prop=1){#
  browser()#
  s <- apply(r, 2, function(x, min.prop){    # does the sample render more than #
    (sum(x >= m) / length(x)) >= min.prop    # min.prop categories with >=  m attributes                                                                                     #
  }, min.prop=min.prop)  #
  sum(s) / ncol(r)#
}
prob_categories <- Vectorize(prob_categories, vectorize.args=c("m", "min.prop"))
prob_categories(r, 4, min.prop=.9)
  s <- apply(r, 2, function(x, min.prop){    # does the sample render more than
    (sum(x >= m) / length(x)) >= min.prop    # min.prop categories with >=  m attributes
  }, min.prop=min.prop)
  sum(s) / ncol(r)
r
 s <- apply(r, 1, function(x, min.prop){    # does the sample render more than #
    (sum(x >= m) / length(x)) >= min.prop    # min.prop categories with >=  m attributes                                                                                     #
  }, min.prop=min.prop)  #
  sum(s) / ncol(r)
  sum(s) / nrow(r)
simulate_evocation <- function(prob, n=seq(10, 80, by=10), a=7, times=100){#
  r <- list()#
  for (i in seq_along(n))#
    r[[i]] <- sim_n_persons_x_times(prob, n=n[i], a=a, times=times)#
  r#
}
r <- simulate_evocation(dexp(1:30, .05), a=7, times=120)
r
str(r)
Q
# Wahrscheinlichkeit, dass mindestens prop Prozent der Kategorien mindestens  #
# m mal gennant wurden. #
prob_categories <- function(r, m, min.prop=1){#
  s <- apply(r, 1, function(x, min.prop){    # does the sample render more than #
    (sum(x >= m) / length(x)) >= min.prop    # min.prop categories with >=  m attributes                                                                                     #
  }, min.prop=min.prop)  #
  sum(s) / nrow(r)#
}#
#prob_categories <- Vectorize(prob_categories, vectorize.args=c("m", "min.prop"))#
#
r <- sim_n_persons_x_times(dexp(1:30, rate=.05), n=50, a=sam, 100)#
prob_categories(r, 4, min.prop=.9)#
#
#
# Wie ist die Wkt bei der gegebenen Verteilung für verschiedene m und verschiedene#
# min.prop#
simulate_evocation <- function(prob, n=seq(10, 80, by=10), a=7, times=100){#
  r <- list()#
  for (i in seq_along(n))#
    r[[i]] <- sim_n_persons_x_times(prob, n=n[i], a=a, times=times)#
  r#
}#
#
r <- simulate_evocation(dexp(1:30, .05), a=7, times=120)#
  #
#
calc_probalities <- function(r, n, ms, min.props=c(.9, .95, .99)){  #
  res <- NULL#
  for (m in ms){#
    for (min.prop in min.props){  #
      probs <- sapply(r, prob_categories, m=m, min=min.prop)#
      res.df <- cbind(n=n, m=m, min.prop=min.prop, prob=probs)#
      res <- append(res, list(res.df))    #
    }#
  }#
  dd <- as.data.frame(do.call(rbind, res))  #
  dd#
}
prob <-  dexp(1:30, rate = .05)  # c(10,8,6,4,3,2,1)
n <- seq(10, 80, by=5)
r <- simulate_evocation(prob, n, a=7, times=100)
prob <-  dexp(1:30, rate = .05)  # c(10,8,6,4,3,2,1)
n <- seq(10, 80, by=20)
r <- simulate_evocation(prob, n, a=7, times=100)
dd <- calc_probalities(r, n, ms=1:5, min.props=c(0.9, .95, 1))
dd
dd$m <- as.factor(dd$m)
g <- ggplot(dd, aes(x=n, y=prob, group=m, shape=m)) +  geom_line() + geom_point() +
       scale_y_continuous("Probability", lim=c(0,1)) +
       scale_x_continuous("Sample size N") + facet_grid(. ~ min.prop)
print(g)
no <- c(1,30)
sam <- quote(sample(no, 1))
sim_n_persons_x_times(dexp(1:30, .05), n=2, a=sam, times=100)
prob <-  dexp(1:30, rate = .05)  # c(10,8,6,4,3,2,1)
n <- seq(10, 80, by=20)
sam <- quote(sample(c(1:30), 1))
r <- simulate_evocation(prob, n, a=sam, times=100)
dd <- calc_probalities(r, n, ms=1:5, min.props=c(0.9, .95, 1))
dd
simulate_evocation <- function(prob, n=seq(10, 80, by=10), a=7, times=100){#
  r <- list()#
  browser()#
  for (i in seq_along(n))#
    r[[i]] <- sim_n_persons_x_times(prob, n=n[i], a=a, times=times)#
  r#
}
r <- simulate_evocation(prob, n, a=sam, times=100)
sam
#
#
  |==========                                                                               |  11%
#
#
  |================                                                                         |  18%
#
#
  |============================                                                             |  31%
#
#
  |=========================================================================================| 100%#
#
  |====================================================================                     |  76%#
Q
no <- c(1,30)
sam <- quote(sample(no, 1))
r <- simulate_evocation(prob, n, a=sam, times=100)
sample
sam
Q
r <- simulate_evocation(prob, n, a=7, times=100)
r <- simulate_evocation(prob, n, a=sample(1:30, 1), times=100)
sam
Q
r <- simulate_evocation(prob, n, a=sample(1:30, 1), times=100)
a
Q
r <- simulate_evocation(prob, n, a=quote(sample(1:30, 1)), times=100)
a
library(RGtk2)
library(cairoDevice)
library(ggplot2)
?library
library(RGtk2)
library(cairoDevice)
library(ggplot2, quietly=T)
library(RGtk2)
library(cairoDevice)
library(ggplot2, warn.conflicts=F)
library(gridsampler)
sampler()
### source files from R directory#
library(RGtk2)#
library(cairoDevice)#
library(ggplot2, warn.conflicts=F, quietly=T)   #
#
topdir <- "/Users/markheckmann/Documents/R/pkg_dev/grid/gridsampler"#
pkgdir <- paste(topdir, "/gridsampler", sep="")#
rdir <- paste(pkgdir, "/R", sep="")#
setwd(rdir)#
files <- dir()#
for (file in files)#
  source(file)
# run fpr package building and checking#
library(roxygen2) #
library(devtools)#
 #
topdir <- "/Users/markheckmann/Documents/R/pkg_dev/grid/gridsampler"#
pkgdir <- paste(topdir, "/gridsampler", sep="")#
roxygenize(pkgdir)#
build(pkg = pkgdir, path = topdir, binary = FALSE) #
check(pkg = pkgdir, document = TRUE)#
install(pkg = pkgdir, reload = TRUE)
roxygenize(pkgdir)
build(pkg = pkgdir, path = topdir, binary = FALSE)
check(pkg = pkgdir, document = TRUE)
install(pkg = pkgdir, reload = TRUE)
